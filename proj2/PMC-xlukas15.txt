Architektury Výpočetních Systémů (AVS 2024)
Projekt č. 2 (PMC)
Login: xlukas15

Úloha 1: Paralelizace původního řešení
===============================================================================
1) Kterou ze smyček (viz zadání) je vhodnější paralelizovat a co způsobuje 
   neefektivitu paralelizaci té druhé?
   
   Pro paralelizaci jsem si vybral smyčku v metodě marchCubes (tedy tu první).
   První smyčka se totiž nachází v nejvyšší úrovni.
   Volá se v ní metoda buildCube, která teprve pak volá evaluateFieldAt (je volaná 8krát pro každé spuštění buildCube).
   Bylo by tedy neefektivní ji mít ve druhé smyčce, protože by se zbytečně často zakládala a rušila nová vlákna.

2) Jak jste ve funkci LoopMeshBuilder::marchCubes zajistili správný výsledek 
  (počet trojúhelníků) vrácený touto funkcí? Popište jaké řešení jste zvolili a proč.  
  
   Zajistil jsem to pomocí OpenMP redukce na proměnné totalTriangles (reduction(+: totalTriangles)).
   Díky tomu vždy dostanu správný součet na konci smyčky, protože redukce umožňuje souběžně přistupovat k datům (v mém případě k totalTriangles).

3) Jaké plánování (rozdělení práce mezi vlákna) jste zvolili a proč? Popište, na
   jakých datech (počet vláken, velikost problému) jste k závěrům došli.  

   Zvolil jsem si plánování schedule(guided, 8).
   Různé typy plánování jsem zkoušel na souboru bun_zipper_res3.pts s --grid 128 a úlohu jsem spouštěl pro 18 a 36 vláken.
   Pro různá plánování a velikosti jsem spustil 20 iterací, z nichž právě guided, 8 mi vyšla nejlépe.
   Nicméně velmi podobně vyšla i třeba dynamic, 8.
   Výsledné plánování jsem vybral na základě dosažených časů (avg 18 vláken: 492 ms, avg 36 vláken: 312 ms).

Úloha 2: Paralelní průchod stromem
===============================================================================
1) Stručně popište použití OpenMP tasků ve vašem řešení. 

2) Jakou hodnotu cut-off jste zvolili? Jaké hodnoty "cut-off" jste zkoušeli, 
   na jak velkých velikostech problému a jakých času jste dosáhli? 
   Odůvodněte vaši volbu.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně 
   v metodě LoopMeshBuilder::emitTriangle?

Úloha 3: Grafy škálování všech řešení
===============================================================================

1) Stručně zhodnoťte efektivitu vytvořených řešení 
   (na základě VŠECH odevzdaných grafů ŠKÁLOVÁNÍ).

2) V jakém případě (v závislosti na počtu bodů ve vstupním souboru a velikosti 
   mřížky) bude vaše řešení 1. úlohy neefektivní? 
   (pokud takový případ existuje a je vidět ve vašem grafu)

3) Je (nebo není) stromový algoritmus efektivnější z pohledu slabého škálování 
   vzhledem ke vstupu?

4) Do souboru 3_4.txt napište svůj login, který používáte na Barboře, na druhý
   řádek napište počet úloh (jobs), které jste spustili za dobu řešení projektu 2
   a na třetí řádek uveďte, kolik času tyto úlohy běžely (formát HH:MM:SS). 
   V souboru 3_4.txt využijte předpřipravené kostry - údaje přepište. Můžete využít
   údajů ze Slurm plánovače, nepočítejte úlohy se suffixem (přepínač -X).


Úloha 4: Analýza využití jader pomocí VTune
================================================================================

1) Jaké bylo průměrné využití jader pro všechny tři implementace s omezením na 
   18 vláken? Hodnoty zapište do souboru 4_1.txt
   (využijte předpřipravené kostry v souboru - čísla přepište).
   
   ref:
   loop:
   tree:

2) Jaké bylo průměrné využití jader pro všechny tři implementace s využitím 
   všech jader? Hodnoty zapište do souboru 4_2.txt (využijte předpřipravené 
   kostry v souboru - čísla přepište).
   
   ref:
   loop:
   tree:   

3) Vypočítejte efektivitu vašeho řešení loop a tree vůči ref pro 18 a 36 vláken. 
   Hodnoty naměřte ručně na výpočetním uzlu, ne přes VTune. Použijte následující parametry:
   
   ./PMC --builder {ref, tree, loop} -t {18, 36} --grid 128 ../data/bun_zipper_res3.pts 
   
   Hodnoty zapište do souboru 4_3.txt 
   (využijte předpřipravené kostry v souboru - čísla přepište):
   "loop (18)" vs. "ref"
   "tree (18)" vs. "ref"
   "loop (36)" vs. "ref"
   "tree (36)" vs. "ref"
